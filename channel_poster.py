import json
import random
import asyncio
import os
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from loguru import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
POSTER_TOKEN = os.getenv("POSTER_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
logger.debug(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {POSTER_TOKEN}")
target = "content/dating2"
smart_link = "https://google.com"
prokladka = "https://yandex.ru"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=POSTER_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT
    )
""")
conn.commit()

user_chat_id = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def save_user(user_id, username):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_id} ({username})")


def load_messages(target):
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ JSON"""
    with open(f"{target}/messages.json", "r", encoding="utf-8") as file:
        return json.load(file)


async def send_post(messages):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    links = messages.get("links_texts")
    buttons = messages.get("buttons_text")
    text = messages.get("desc")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    if links:
        for link in links:
            text += "\n" + f"<a href='{random.choice([smart_link, prokladka])}'>{link}</a>"
    if buttons:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=button, url=random.choice([smart_link, prokladka]))]
                for button in buttons
            ]
        )
    await bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=FSInputFile('content/' + messages.get("image")),
        caption=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


def generate_post_times():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3-5 —á–∞—Å–æ–≤."""
    # start_time = datetime.now().replace(hour=21, minute=20, second=0, microsecond=0)
    start_time = datetime.now()
    times = []
    for _ in range(6):
        if times:
            start_time = times[-1] + timedelta(minutes=random.randint(1, 3))
        else:
            start_time += timedelta(minutes=random.randint(0, 2))  # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è
        times.append(start_time)
    return times


async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—É—Ç–∫–∏."""
    while True:
        post_times = generate_post_times()
        content_list = load_messages(target=target)
        random.shuffle(content_list)

        for post_time in post_times:
            now = datetime.now()
            delay = (post_time - now).total_seconds()
            if delay > 0:
                await asyncio.sleep(delay)  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞
                content = random.choice(content_list)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
                await send_post(content)

        await asyncio.sleep(600)  # –ñ–¥–µ–º —Å—É—Ç–∫–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.create_task(scheduler())  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
