import json
import random
import asyncio
import os
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from loguru import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
logger.debug(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN}")
target = "content/channel"
smart_link = "https://google.com"
prokladka = "https://yandex.ru"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT
    )
""")
conn.commit()

user_chat_id = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def save_user(user_id, username):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_id} ({username})")


def load_messages(target):
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ JSON"""
    with open(f"{target}/messages.json", "r", encoding="utf-8") as file:
        return json.load(file)


async def send_post(user_id, messages):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞"""

    links = messages.get("links_texts")
    buttons = messages.get("buttons_text")
    text = messages.get("desc")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    if links:
        for link in links:
            text += "\n" + f"<a href='{random.choice([smart_link, prokladka])}'>{link}</a>"
    if buttons:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=button, url=random.choice([smart_link, prokladka]))]
                for button in buttons
            ]
        )
    await bot.send_photo(chat_id=user_id,
                         photo=FSInputFile('content/' + messages.get("image")),
                         caption=text,
                         parse_mode="HTML",
                         reply_markup=keyboard)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global user_chat_id
    user_chat_id = message.chat.id
    user_id = message.chat.id
    username = message.from_user.username if message.from_user.username else "Anonimus"

    save_user(user_id, username)

    logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_chat_id}")

    messages = load_messages(target=target)
    await send_post(user_id=user_chat_id, messages=messages[0])


async def send_random_post():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global user_chat_id
    messages = load_messages(target=target)
    random.shuffle(messages)
    while True:
        if user_chat_id is None:
            await asyncio.sleep(5)
            continue

        for post in messages:

            delay = random.randint(1200, 1800)
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ—Å—Ç–∞...")
            await asyncio.sleep(delay)

            await send_post(user_id=user_chat_id, messages=post)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.create_task(send_random_post())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
